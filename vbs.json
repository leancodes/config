{
  // === ERROR HANDLING & DIAGNOSTICS ===
  "errwrap": {
    "prefix": "errwrap",
    "description": "Reusable error wrapper for procedures",
    "body": [
      "On Error GoTo errh",
      "$0",
      "exith:",
      "    Exit ${1:Sub}",
      "errh:",
      "    Debug.Print \"[ERR] \" & Err.Number & \": \" & Err.Description",
      "    Resume exith"
    ]
  },

  "tryprop": {
    "prefix": "tryprop",
    "description": "Inline property assignment with error catch",
    "body": [
      "On Error Resume Next",
      "${1:object}.${2:property} = ${3:value}",
      "If Err.Number <> 0 Then",
      "    Debug.Print \"[WARN] Failed: \" & Err.Description",
      "    Err.Clear",
      "End If"
    ]
  },

  "logtrace": {
    "prefix": "logt",
    "description": "Structured trace log",
    "body": [
      "Debug.Print \"TRACE | \" & Now & \" | ${1:ProcName} | \" & ${2:message}"
    ]
  },

  // === TESTING ===
  "testproc": {
    "prefix": "testp",
    "description": "Test wrapper procedure with asserts",
    "body": [
      "Public Sub Test_${1:ProcName}()",
      "    On Error GoTo errh",
      "    Dim result As Variant",
      "    result = ${1}(${2:args})",
      "    Call AssertEquals(${3:expected}, result, \"${1} result match\")",
      "    Exit Sub",
      "errh:",
      "    Debug.Print \"Test ${1} failed: \" & Err.Description",
      "End Sub"
    ]
  },

  "assertrange": {
    "prefix": "assrng",
    "description": "Assert that range value matches expected",
    "body": [
      "If ${1:Range}.Value <> ${2:Expected} Then",
      "    Debug.Print \"ASSERT FAIL: \" & ${1:Range}.Address & \" | Got: \" & ${1:Range}.Value",
      "Else",
      "    Debug.Print \"PASS: \" & ${1:Range}.Address",
      "End If"
    ]
  },

  // === NAMING AND MODULE HEADER ===
  "modhdr": {
    "prefix": "modhdr",
    "description": "Standard module header",
    "body": [
      "' ===== Module: ${1:Name} =====",
      "' Purpose: ${2:Purpose}",
      "' Author: ${3:YourName}",
      "' Date: ${4:`date`}",
      "Option Explicit",
      ""
    ]
  },

  "clshdr": {
    "prefix": "clshdr",
    "description": "Standard class module header",
    "body": [
      "' ===== Class: ${1:Name} =====",
      "' Purpose: ${2:Purpose}",
      "' Author: ${3:YourName}",
      "' Date: ${4:`date`}",
      "Option Explicit",
      "",
      "' -- Members",
      "' -- Methods",
      "' -- Properties",
      ""
    ]
  },
  // === EXCEL RANGE / SHEET OPS (ETL) ===
  "xvalcell": {
    "prefix": "xval",
    "description": "Validate a cell has a non-empty value",
    "body": [
      "If Trim(${1:cell}.Value) = \"\" Then",
      "    Debug.Print \"Empty cell: \" & ${1:cell}.Address",
      "End If"
    ]
  },

  "xclear": {
    "prefix": "xclr",
    "description": "Clear content and formatting from range",
    "body": [
      "${1:Sheet1}.Range(\"${2:A1:D100}\").ClearContents",
      "${1}.Range(\"$2\").ClearFormats"
    ]
  },

  "xdelrow": {
    "prefix": "xdelr",
    "description": "Delete row if condition met",
    "body": [
      "If ${1:Sheet}.Cells(${2:i}, ${3:col}).Value = \"${4:Target}\" Then",
      "    ${1:Sheet}.Rows(${2:i}).Delete",
      "End If"
    ]
  },

  "wsloop": {
    "prefix": "wsloop",
    "description": "Loop through all worksheets",
    "body": [
      "Dim ws As Worksheet",
      "For Each ws In ThisWorkbook.Worksheets",
      "    $0",
      "Next ws"
    ]
  },

  "rngloop": {
    "prefix": "rngloop",
    "description": "Row-wise range iteration",
    "body": [
      "Dim r As Range",
      "For Each r In ${1:Sheet1}.Range(\"${2:A2:A100}\").Cells",
      "    $0",
      "Next r"
    ]
  },

  // === UTILITIES ===
  "strclean": {
    "prefix": "strcln",
    "description": "Trim + clean string",
    "body": [
      "Function CleanString(ByVal txt As String) As String",
      "    CleanString = Trim(Replace(txt, vbCrLf, \" \"))",
      "End Function"
    ]
  },

  "rngcopy": {
    "prefix": "rngcpy",
    "description": "Copy range between sheets",
    "body": [
      "${1:Sheet1}.Range(\"${2:A1:D10}\").Copy",
      "${3:Sheet2}.Range(\"${4:A1}\").PasteSpecial xlPasteValues"
    ]
  },

  "colwidthauto": {
    "prefix": "colw",
    "description": "Auto fit column width",
    "body": [
      "${1:Sheet}.Columns(\"${2:A:D}\").AutoFit"
    ]
  },

  // === DEFENSIVE + MAINTAINABILITY ===
  "precond": {
    "prefix": "prechk",
    "description": "Guard clause for required value",
    "body": [
      "If ${1:arg} Is Nothing Then",
      "    Err.Raise vbObjectError + 1000, , \"${2:Missing required argument: }$1\"",
      "End If"
    ]
  },

  "typechk": {
    "prefix": "typchk",
    "description": "Type check object before use",
    "body": [
      "If Not TypeOf ${1:obj} Is ${2:ExpectedType} Then",
      "    Err.Raise vbObjectError + 1001, , \"Invalid type: Expected ${2}\"",
      "End If"
    ]
  },

  "retry": {
    "prefix": "retry",
    "description": "Retry loop with max attempts",
    "body": [
      "Dim attempt As Integer: attempt = 0",
      "Const maxTries As Integer = ${1:3}",
      "Do",
      "    On Error Resume Next",
      "    ${2:codeToTry}",
      "    If Err.Number = 0 Then Exit Do",
      "    Err.Clear: attempt = attempt + 1",
      "Loop While attempt < maxTries"
    ]
  },
  // === MODULE ORGANIZATION ===
  "modstart": {
    "prefix": "modstart",
    "description": "Start region for module section",
    "body": [
      "' === ${1:Section} ==="
    ]
  },

  "modend": {
    "prefix": "modend",
    "description": "End region comment (foldable)",
    "body": [
      "' === END ${1:Section} ==="
    ]
  },

  // === INTERFACE DECLARATION STUB ===
  "iface": {
    "prefix": "iface",
    "description": "Declare interface class",
    "body": [
      "' Interface: ${1:IName}",
      "' Defines contract for...",
      "Option Explicit"
    ]
  },

  // === SHEET UTIL SHORTCUT ===
  "sheetget": {
    "prefix": "sheetg",
    "description": "Get worksheet safely",
    "body": [
      "Function GetSheet(name As String) As Worksheet",
      "    On Error Resume Next",
      "    Set GetSheet = ThisWorkbook.Worksheets(name)",
      "    If GetSheet Is Nothing Then Err.Raise vbObjectError + 1002, , \"Sheet not found: \" & name",
      "End Function"
    ]
  },

  // === SHEET EXISTS ===
  "sheetex": {
    "prefix": "sheetex",
    "description": "Check if worksheet exists",
    "body": [
      "Function SheetExists(sheetName As String) As Boolean",
      "    Dim ws As Worksheet",
      "    On Error Resume Next",
      "    Set ws = ThisWorkbook.Sheets(sheetName)",
      "    SheetExists = Not ws Is Nothing",
      "End Function"
    ]
  }
}
